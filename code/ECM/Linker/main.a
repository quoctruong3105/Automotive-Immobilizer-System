;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <alcd.h>
;#include <stdio.h>
;
;#define siren PORTB.0
;#define warningLight PORTB.1
;#define On 1;
;#define Off 0;
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;unsigned int timeEnterPassWord = 0;
;unsigned int i = 0;
;unsigned char ID[8];
;
;int kiemTraID()
; 0000 0032 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0033     unsigned int j;
; 0000 0034     unsigned char correctID[8] = {'1','2','3','-','+','=','0','N'};
; 0000 0035     for(j = 0; j < 8; j++)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;	j -> R16,R17
;	correctID -> Y+2
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0036     {
; 0000 0037         if(ID[j] != correctID[j])
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0038         {
; 0000 0039             break;
;PCODE: $00000033 VOL: 0
; 0000 003A         }
; 0000 003B         else
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003C         {
; 0000 003D             continue;
;PCODE: $00000036 VOL: 0
; 0000 003E         }
;PCODE: $00000037 VOL: 0
; 0000 003F     }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0040     if(j == 8)
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0041     {
; 0000 0042         return 1; // True
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0043     }
; 0000 0044     else
;PCODE: $00000047 VOL: 0
; 0000 0045     {
; 0000 0046         return 0; // False
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0047     }
;PCODE: $0000004F VOL: 0
; 0000 0048 }
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;
;void turnOnWarning()
; 0000 004B {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 004C     warningLight = On;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 004D     siren = On;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004E     delay_ms(200);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 004F     warningLight = Off;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0050     siren = Off;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0051 }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;// SPI interrupt service routine
;interrupt [SPI_STC] void spi_isr(void)
; 0000 0055 {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0056     ID[i]=SPDR;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0057     lcd_gotoxy(0,0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0058     lcd_gotoxy(i,1);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0059     lcd_putchar(ID[i]);
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 005A     i++;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 005B     if(i == 8)
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 005C     {
; 0000 005D         i = 0;
;PCODE: $00000080 VOL: 0
; 0000 005E         kiemTraID();
;PCODE: $00000081 VOL: 0
; 0000 005F         if(kiemTraID() == 1)
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0060         {
; 0000 0061             lcd_clear();
;PCODE: $00000085 VOL: 0
; 0000 0062             lcd_puts("correct ID");
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0063             delay_ms(1000);
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0064             lcd_clear();
;PCODE: $0000008D VOL: 0
; 0000 0065             //Communicate with ECU ENGiNE
; 0000 0066             putchar('c');
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0067             UDR0 = getchar();
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0068             lcd_puts("Unlock Engine");
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0069             SPCR=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 006A         }
; 0000 006B         else
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 006C         {
; 0000 006D             lcd_clear();
;PCODE: $0000009B VOL: 0
; 0000 006E             lcd_puts("Not correct");
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 006F             delay_ms(1000);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 0070             lcd_clear();
;PCODE: $000000A3 VOL: 0
; 0000 0071             timeEnterPassWord++;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0072             if(timeEnterPassWord > 2) //Allow Enter Wrong ID Only 3 times
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 0073             {
; 0000 0074                 //Communicate with ECU ENGINE
; 0000 0075                 putchar('w');
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0076                 UDR0 = getchar();
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0077                 lcd_puts("Lock Engine");
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0078                 SPCR=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0079             }
; 0000 007A         }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 007B     }
; 0000 007C     delay_ms(300);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 007D }
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0

	.DSEG
_0x14:
	.BYTE 0x31
;
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 008F {

	.CSEG
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0090 char status,data;
; 0000 0091 status=UCSR0A;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0092 data=UDR0;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 0093 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0094    {
; 0000 0095    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0096 #if RX_BUFFER_SIZE0 == 256
; 0000 0097    // special case for receiver buffer size=256
; 0000 0098    if (++rx_counter0 == 0)
; 0000 0099       {
; 0000 009A #else
; 0000 009B    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 009C    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 009D       {
; 0000 009E       rx_counter0=0;
;PCODE: $000000D7 VOL: 0
; 0000 009F #endif
; 0000 00A0       rx_buffer_overflow0=1;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00A1       }
; 0000 00A2    }
;PCODE: $000000DA VOL: 0
; 0000 00A3 }
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 00AA {
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00AB char data;
; 0000 00AC while (rx_counter0==0);
;PCODE: $000000E2 VOL: 0
;	data -> R17
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00AD data=rx_buffer0[rx_rd_index0++];
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00AE #if RX_BUFFER_SIZE0 != 256
; 0000 00AF if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00B0 #endif
; 0000 00B1 #asm("cli")
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
	cli
;PCODE: $000000F3 VOL: 0
; 0000 00B2 --rx_counter0;
;PCODE: $000000F4 VOL: 0
; 0000 00B3 #asm("sei")
;PCODE: $000000F5 VOL: 0
	sei
;PCODE: $000000F6 VOL: 0
; 0000 00B4 return data;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00B5 }
;PCODE: $000000FA VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00C5 {
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00C6 if (tx_counter0)
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00C7    {
; 0000 00C8    --tx_counter0;
;PCODE: $000000FF VOL: 0
; 0000 00C9    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00CA #if TX_BUFFER_SIZE0 != 256
; 0000 00CB    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00CC #endif
; 0000 00CD    }
;PCODE: $0000010A VOL: 0
; 0000 00CE }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00D5 {
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00D6 while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00D7 #asm("cli")
;PCODE: $00000117 VOL: 0
	cli
;PCODE: $00000118 VOL: 0
; 0000 00D8 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00D9    {
; 0000 00DA    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00DB #if TX_BUFFER_SIZE0 != 256
; 0000 00DC    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00DD #endif
; 0000 00DE    ++tx_counter0;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00DF    }
; 0000 00E0 else
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00E1    UDR0=c;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00E2 #asm("sei")
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
	sei
;PCODE: $00000132 VOL: 0
; 0000 00E3 }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;
;
;void main(void)
; 0000 00ED {
;PCODE: $00000136 VOL: 0
; 0000 00EE 
; 0000 00EF // Crystal Oscillator division factor: 1
; 0000 00F0 #pragma optsize-
; 0000 00F1 CLKPR=0x80;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00F2 CLKPR=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00F3 #ifdef _OPTIMIZE_SIZE_
; 0000 00F4 #pragma optsize+
; 0000 00F5 #endif
; 0000 00F6 
; 0000 00F7 // SPI initialization
; 0000 00F8 SPCR=0b11000011;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 00F9 SPSR=0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 00FA 
; 0000 00FB // Clear the SPI interrupt flag
; 0000 00FC #asm
;PCODE: $0000013F VOL: 0
; 0000 00FD     in   r30,spsr
    in   r30,spsr
;PCODE: $00000140 VOL: 0
; 0000 00FE     in   r30,spdr
    in   r30,spdr
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00FF #endasm
; 0000 0100 
; 0000 0101 //Set up chan Slave
; 0000 0102 DDRB = 0b00010000;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0103 PORTB = 0b00001100;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0104 
; 0000 0105 // USART initialization
; 0000 0106 UCSR0A=0x00;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0107 UCSR0B=0xD8;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0108 UCSR0C=0x06;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0109 UBRR0H=0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 010A UBRR0L=0x08;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 010B 
; 0000 010C DDRB.0 = 1;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 010D DDRB.1 = 1;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 010E PORTB.0 = 0;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 010F PORTB.1 = 0;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0110 
; 0000 0111 // Characters/line: 16
; 0000 0112 lcd_init(16);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 0113 
; 0000 0114 // Global enable interrupts
; 0000 0115 #asm("sei")
;PCODE: $0000015C VOL: 0
	sei
;PCODE: $0000015D VOL: 0
; 0000 0116 
; 0000 0117 while (1)
;PCODE: $0000015E VOL: 0
; 0000 0118       {
; 0000 0119         if(timeEnterPassWord < 3 && SPCR != 0x00)
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 011A         {
; 0000 011B             lcd_gotoxy(0,0);
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 011C             lcd_puts("Enter ID: ");
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 011D         }
; 0000 011E         else if(timeEnterPassWord == 3)
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 011F         {
; 0000 0120             turnOnWarning();
;PCODE: $00000177 VOL: 0
; 0000 0121             lcd_gotoxy(0,1);
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
; 0000 0122             lcd_puts("Theft Warning!");
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0123         }
; 0000 0124         delay_ms(200);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0125       }
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0126 }
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0

	.DSEG
_0x38:
	.BYTE 0x1A
