;// c -> correct
;// w -> wrong
;// l -> lock
;// u -> unlock
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;#define Igt1 PORTB.0
;#define Igt2 PORTB.1
;#define Igt3 PORTB.2
;#define Igt4 PORTB.3
;#define SparkPlug1 1
;#define SparkPlug4 2
;#define SparkPlug2 3
;#define SparkPlug3 4
;#define On 1
;#define Off 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;#ifndef TXB8
;#define TXB8 0
;#endif
;#ifndef UPE
;#define UPE 2
;#endif
;#ifndef DOR
;#define DOR 3
;#endif
;#ifndef FE
;#define FE 4
;#endif
;#ifndef UDRE
;#define UDRE 5
;#endif
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;
;unsigned int thuTuNo = 0;
;unsigned int curSparkPlug;
;
;// Chose spark plug in turn
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0038     thuTuNo++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0039     if(thuTuNo == 5)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003A     {
; 0000 003B         thuTuNo = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003C     }
; 0000 003D     if(thuTuNo == 1)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003E     {
; 0000 003F         curSparkPlug = SparkPlug1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0040     }
; 0000 0041     else if(thuTuNo == 2)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0042     {
; 0000 0043         curSparkPlug = SparkPlug4;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0044     }
; 0000 0045     else if(thuTuNo == 3)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0046     {
; 0000 0047         curSparkPlug = SparkPlug2;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0048     }
; 0000 0049     else if(thuTuNo == 4)
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 004A     {
; 0000 004B         curSparkPlug = SparkPlug3;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 004C     }
; 0000 004D }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;// Ignition timing
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0051 {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0052     //unsigned int i;
; 0000 0053     if(curSparkPlug == SparkPlug1)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0054     {
; 0000 0055         Igt1 = On;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0056         delay_ms(200);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0057         Igt1 = Off;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0058     }
; 0000 0059     else if(curSparkPlug == SparkPlug4)
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005A     {
; 0000 005B         Igt4 = On;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005C         delay_ms(200);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005D         Igt4 = Off;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 005E     }
; 0000 005F     else if(curSparkPlug == SparkPlug2)
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0060     {
; 0000 0061         Igt2 = On;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0062         delay_ms(200);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0063         Igt2 = Off;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0064     }
; 0000 0065     else if(curSparkPlug == SparkPlug3)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0066     {
; 0000 0067         Igt3 = On;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0068         delay_ms(200);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0069         Igt3 = Off;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 006A     }
; 0000 006B }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 007C {
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 007D char status,data;
; 0000 007E status=UCSR0A;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 007F data=UDR0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0080 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0081    {
; 0000 0082    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0083 #if RX_BUFFER_SIZE0 == 256
; 0000 0084    // special case for receiver buffer size=256
; 0000 0085    if (++rx_counter0 == 0)
; 0000 0086       {
; 0000 0087 #else
; 0000 0088    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0089    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 008A       {
; 0000 008B       rx_counter0=0;
;PCODE: $00000089 VOL: 0
; 0000 008C #endif
; 0000 008D       rx_buffer_overflow0=1;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 008E       }
; 0000 008F    }
;PCODE: $0000008C VOL: 0
; 0000 0090 }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0097 {
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0098 char data;
; 0000 0099 while (rx_counter0==0);
;PCODE: $00000094 VOL: 0
;	data -> R17
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 009A data=rx_buffer0[rx_rd_index0++];
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 009B #if RX_BUFFER_SIZE0 != 256
; 0000 009C if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 009D #endif
; 0000 009E #asm("cli")
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
	cli
;PCODE: $000000A5 VOL: 0
; 0000 009F --rx_counter0;
;PCODE: $000000A6 VOL: 0
; 0000 00A0 #asm("sei")
;PCODE: $000000A7 VOL: 0
	sei
;PCODE: $000000A8 VOL: 0
; 0000 00A1 return data;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00A2 }
;PCODE: $000000AC VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00B2 {
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00B3 if (tx_counter0)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00B4    {
; 0000 00B5    --tx_counter0;
;PCODE: $000000B1 VOL: 0
; 0000 00B6    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B7 #if TX_BUFFER_SIZE0 != 256
; 0000 00B8    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00B9 #endif
; 0000 00BA    }
;PCODE: $000000BC VOL: 0
; 0000 00BB }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00C2 {
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00C3 while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00C4 #asm("cli")
;PCODE: $000000C9 VOL: 0
	cli
;PCODE: $000000CA VOL: 0
; 0000 00C5 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00C6    {
; 0000 00C7    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00C8 #if TX_BUFFER_SIZE0 != 256
; 0000 00C9    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00CA #endif
; 0000 00CB    ++tx_counter0;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00CC    }
; 0000 00CD else
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00CE    UDR0=c;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00CF #asm("sei")
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
	sei
;PCODE: $000000E4 VOL: 0
; 0000 00D0 }
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;#pragma used-
;#endif
;
;
;void main(void)
; 0000 00D6 {
;PCODE: $000000E8 VOL: 0
; 0000 00D7 
; 0000 00D8 // Crystal Oscillator division factor: 1
; 0000 00D9 #pragma optsize-
; 0000 00DA CLKPR=0x80;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00DB CLKPR=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00DC #ifdef _OPTIMIZE_SIZE_
; 0000 00DD #pragma optsize+
; 0000 00DE #endif
; 0000 00DF 
; 0000 00E0 // External Interrupt(s) initialization
; 0000 00E1 EICRA=0x0A;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00E2 EIMSK=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00E3 EIFR=0x03;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00E4 
; 0000 00E5 // USART initialization
; 0000 00E6 UCSR0A=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00E7 UCSR0B=0xD8;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00E8 UCSR0C=0x06;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00E9 UBRR0H=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00EA UBRR0L=0x08;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 00EB 
; 0000 00EC // Out put Ignition signal
; 0000 00ED DDRB = 0b11111111;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00EE PORTB = 0b00000000;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00EF 
; 0000 00F0 #asm("sei")
;PCODE: $00000101 VOL: 0
	sei
;PCODE: $00000102 VOL: 0
; 0000 00F1 
; 0000 00F2 while (1)
;PCODE: $00000103 VOL: 0
; 0000 00F3       {
; 0000 00F4         UDR0 = getchar();
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00F5         if(UDR0 == 'c')
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00F6         {
; 0000 00F7             EIMSK = 0b00000011;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00F8             putchar('u');
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00F9         }
; 0000 00FA         else if(UDR0 == 'w')
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00FB         {
; 0000 00FC             EIMSK = 0b00000000;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00FD             putchar('l');
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00FE         }
; 0000 00FF       }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0100 }
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
