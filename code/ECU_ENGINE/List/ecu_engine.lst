
AVRASM ver. 2.1.30  E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm Tue Sep 13 06:53:20 2022

E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1061): warning: Register r3 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1062): warning: Register r5 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1063): warning: Register r8 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1064): warning: Register r7 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1065): warning: Register r10 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1066): warning: Register r9 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1067): warning: Register r12 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1068): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Advanced
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega328P
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2303
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _thuTuNo=R3
                 	.DEF _curSparkPlug=R5
                 	.DEF _rx_wr_index0=R8
                 	.DEF _rx_rd_index0=R7
                 	.DEF _rx_counter0=R10
                 	.DEF _tx_wr_index0=R9
                 	.DEF _tx_rd_index0=R12
                 	.DEF _tx_counter0=R11
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0046 	JMP  __RESET
000002 940c 00a7 	JMP  _ext_int0_isr
000004 940c 007e 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00e9 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 011a 	JMP  _usart_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
00003d 0001
00003e 0002
00003f 0003
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1114): warning: .cseg .db misalignment - padding zero byte
000040 0004      	.DB  0x1,0x0,0x2,0x0,0x3,0x0,0x4
                 _0x40:
000041 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000042 0002      	.DW  0x02
000043 0003      	.DW  0x03
000044 0082      	.DW  _0x40*2
                 
                 _0xFFFFFFFF:
000045 0000      	.DW  0
                 
                 __RESET:
000046 94f8      	CLI
000047 27ee      	CLR  R30
000048 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000049 e0f1      	LDI  R31,1
00004a bff5      	OUT  MCUCR,R31
00004b bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00004c e1f8      	LDI  R31,0x18
00004d 95a8      	WDR
00004e b7a4      	IN   R26,MCUSR
00004f 7fa7      	CBR  R26,8
000050 bfa4      	OUT  MCUSR,R26
000051 93f0 0060 	STS  WDTCSR,R31
000053 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000055 e08d      	LDI  R24,(14-2)+1
000056 e0a2      	LDI  R26,2
000057 27bb      	CLR  R27
                 __CLEAR_REG:
000058 93ed      	ST   X+,R30
000059 958a      	DEC  R24
00005a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005d e0a0      	LDI  R26,LOW(__SRAM_START)
00005e e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005f 93ed      	ST   X+,R30
000060 9701      	SBIW R24,1
000061 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000062 e8e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000063 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000064 9185      	LPM  R24,Z+
000065 9195      	LPM  R25,Z+
000066 9700      	SBIW R24,0
000067 f061      	BREQ __GLOBAL_INI_END
000068 91a5      	LPM  R26,Z+
000069 91b5      	LPM  R27,Z+
00006a 9005      	LPM  R0,Z+
00006b 9015      	LPM  R1,Z+
00006c 01bf      	MOVW R22,R30
00006d 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006e 9005      	LPM  R0,Z+
00006f 920d      	ST   X+,R0
000070 9701      	SBIW R24,1
000071 f7e1      	BRNE __GLOBAL_INI_LOOP
000072 01fb      	MOVW R30,R22
000073 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000074 e0e0      	LDI  R30,__GPIOR0_INIT
000075 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000076 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000077 bfed      	OUT  SPL,R30
000078 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000079 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007a e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007b e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007c 940c 014d 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;// c -> correct
                 ;// w -> wrong
                 ;// l -> lock
                 ;// u -> unlock
                 ;
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;#define Igt1 PORTB.0
                 ;#define Igt2 PORTB.1
                 ;#define Igt3 PORTB.2
                 ;#define Igt4 PORTB.3
                 ;#define SparkPlug1 1
                 ;#define SparkPlug4 2
                 ;#define SparkPlug2 3
                 ;#define SparkPlug3 4
                 ;#define On 1
                 ;#define Off 0
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;
                 ;unsigned int thuTuNo = 0;
                 ;unsigned int curSparkPlug;
                 ;unsigned int SparkPlug[4] = {SparkPlug1 , SparkPlug4, SparkPlug2, SparkPlug3};
                 
                 	.DSEG
                 ;
                 ;
                 ;// Chose spark plug in turn
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0039 {
                 
                 	.CSEG
                 _ext_int1_isr:
00007e 940e 0184 	CALL SUBOPT_0x0
                 ; 0000 003A     thuTuNo++;
000080 e0e1      	LDI  R30,LOW(1)
000081 e0f0      	LDI  R31,HIGH(1)
                +
000082 0e3e     +ADD R3 , R30
000083 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
                 ; 0000 003B     if(thuTuNo == 5)
000084 e0e5      	LDI  R30,LOW(5)
000085 e0f0      	LDI  R31,HIGH(5)
000086 15e3      	CP   R30,R3
000087 05f4      	CPC  R31,R4
000088 f421      	BRNE _0x4
                 ; 0000 003C     {
                 ; 0000 003D         thuTuNo = 1;
000089 e0e1      	LDI  R30,LOW(1)
00008a e0f0      	LDI  R31,HIGH(1)
                +
00008b 2e3e     +MOV R3 , R30
00008c 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 003E     }
                 ; 0000 003F     if(thuTuNo == 1)
                 _0x4:
00008d e0e1      	LDI  R30,LOW(1)
00008e e0f0      	LDI  R31,HIGH(1)
00008f 15e3      	CP   R30,R3
000090 05f4      	CPC  R31,R4
000091 f409      	BRNE _0x5
                 ; 0000 0040     {
                 ; 0000 0041         curSparkPlug = SparkPlug1;
000092 c011      	RJMP _0x3D
                 ; 0000 0042     }
                 ; 0000 0043     else if(thuTuNo == 2)
                 _0x5:
000093 e0e2      	LDI  R30,LOW(2)
000094 e0f0      	LDI  R31,HIGH(2)
000095 15e3      	CP   R30,R3
000096 05f4      	CPC  R31,R4
000097 f409      	BRNE _0x7
                 ; 0000 0044     {
                 ; 0000 0045         curSparkPlug = SparkPlug4;
000098 c00b      	RJMP _0x3D
                 ; 0000 0046     }
                 ; 0000 0047     else if(thuTuNo == 3)
                 _0x7:
000099 e0e3      	LDI  R30,LOW(3)
00009a e0f0      	LDI  R31,HIGH(3)
00009b 15e3      	CP   R30,R3
00009c 05f4      	CPC  R31,R4
00009d f409      	BRNE _0x9
                 ; 0000 0048     {
                 ; 0000 0049         curSparkPlug = SparkPlug2;
00009e c005      	RJMP _0x3D
                 ; 0000 004A     }
                 ; 0000 004B     else if(thuTuNo == 4)
                 _0x9:
00009f e0e4      	LDI  R30,LOW(4)
0000a0 e0f0      	LDI  R31,HIGH(4)
0000a1 15e3      	CP   R30,R3
0000a2 05f4      	CPC  R31,R4
0000a3 f411      	BRNE _0xB
                 ; 0000 004C     {
                 ; 0000 004D         curSparkPlug = SparkPlug3;
                 _0x3D:
                +
0000a4 2e5e     +MOV R5 , R30
0000a5 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 004E     }
                 ; 0000 004F }
                 _0xB:
0000a6 c084      	RJMP _0x3F
                 ;
                 ;// Ignition timing
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0053 {
                 _ext_int0_isr:
0000a7 920a      	ST   -Y,R0
0000a8 921a      	ST   -Y,R1
0000a9 92fa      	ST   -Y,R15
0000aa 936a      	ST   -Y,R22
0000ab 937a      	ST   -Y,R23
0000ac 938a      	ST   -Y,R24
0000ad 939a      	ST   -Y,R25
0000ae 93aa      	ST   -Y,R26
0000af 93ba      	ST   -Y,R27
0000b0 93ea      	ST   -Y,R30
0000b1 93fa      	ST   -Y,R31
0000b2 b7ef      	IN   R30,SREG
0000b3 93ea      	ST   -Y,R30
                 ; 0000 0054     //unsigned int i;
                 ; 0000 0055     if(curSparkPlug == SparkPlug1)
0000b4 e0e1      	LDI  R30,LOW(1)
0000b5 e0f0      	LDI  R31,HIGH(1)
0000b6 15e5      	CP   R30,R5
0000b7 05f6      	CPC  R31,R6
0000b8 f429      	BRNE _0xC
                 ; 0000 0056     {
                 ; 0000 0057         Igt1 = On;
0000b9 9a28      	SBI  0x5,0
                 ; 0000 0058         delay_ms(200);
0000ba 940e 0189 	CALL SUBOPT_0x1
                 ; 0000 0059         Igt1 = Off;
0000bc 9828      	CBI  0x5,0
                 ; 0000 005A     }
                 ; 0000 005B     else if(curSparkPlug == SparkPlug4)
0000bd c01d      	RJMP _0x11
                 _0xC:
0000be e0e2      	LDI  R30,LOW(2)
0000bf e0f0      	LDI  R31,HIGH(2)
0000c0 15e5      	CP   R30,R5
0000c1 05f6      	CPC  R31,R6
0000c2 f429      	BRNE _0x12
                 ; 0000 005C     {
                 ; 0000 005D         Igt4 = On;
0000c3 9a2b      	SBI  0x5,3
                 ; 0000 005E         delay_ms(200);
0000c4 940e 0189 	CALL SUBOPT_0x1
                 ; 0000 005F         Igt4 = Off;
0000c6 982b      	CBI  0x5,3
                 ; 0000 0060     }
                 ; 0000 0061     else if(curSparkPlug == SparkPlug2)
0000c7 c013      	RJMP _0x17
                 _0x12:
0000c8 e0e3      	LDI  R30,LOW(3)
0000c9 e0f0      	LDI  R31,HIGH(3)
0000ca 15e5      	CP   R30,R5
0000cb 05f6      	CPC  R31,R6
0000cc f429      	BRNE _0x18
                 ; 0000 0062     {
                 ; 0000 0063         Igt2 = On;
0000cd 9a29      	SBI  0x5,1
                 ; 0000 0064         delay_ms(200);
0000ce 940e 0189 	CALL SUBOPT_0x1
                 ; 0000 0065         Igt2 = Off;
0000d0 9829      	CBI  0x5,1
                 ; 0000 0066     }
                 ; 0000 0067     else if(curSparkPlug == SparkPlug3)
0000d1 c009      	RJMP _0x1D
                 _0x18:
0000d2 e0e4      	LDI  R30,LOW(4)
0000d3 e0f0      	LDI  R31,HIGH(4)
0000d4 15e5      	CP   R30,R5
0000d5 05f6      	CPC  R31,R6
0000d6 f421      	BRNE _0x1E
                 ; 0000 0068     {
                 ; 0000 0069         Igt3 = On;
0000d7 9a2a      	SBI  0x5,2
                 ; 0000 006A         delay_ms(200);
0000d8 940e 0189 	CALL SUBOPT_0x1
                 ; 0000 006B         Igt3 = Off;
0000da 982a      	CBI  0x5,2
                 ; 0000 006C     }
                 ; 0000 006D //    for(i = 1; i < 5; i++)
                 ; 0000 006E //    {
                 ; 0000 006F //        if(curSparkPlug == SparkPlug[i])
                 ; 0000 0070 //        {
                 ; 0000 0071 //            Igt[i] = ON;
                 ; 0000 0072 //            delay_ms(200);
                 ; 0000 0073 //            Igt[i] = OFF;
                 ; 0000 0074 //        }
                 ; 0000 0075 //    }
                 ; 0000 0076 }
                 _0x1E:
                 _0x1D:
                 _0x17:
                 _0x11:
0000db 91e9      	LD   R30,Y+
0000dc bfef      	OUT  SREG,R30
0000dd 91f9      	LD   R31,Y+
0000de 91e9      	LD   R30,Y+
0000df 91b9      	LD   R27,Y+
0000e0 91a9      	LD   R26,Y+
0000e1 9199      	LD   R25,Y+
0000e2 9189      	LD   R24,Y+
0000e3 9179      	LD   R23,Y+
0000e4 9169      	LD   R22,Y+
0000e5 90f9      	LD   R15,Y+
0000e6 9019      	LD   R1,Y+
0000e7 9009      	LD   R0,Y+
0000e8 9518      	RETI
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0087 {
                 _usart_rx_isr:
0000e9 940e 0184 	CALL SUBOPT_0x0
                 ; 0000 0088 char status,data;
                 ; 0000 0089 status=UCSR0A;
0000eb 931a      	ST   -Y,R17
0000ec 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000ed 9110 00c0 	LDS  R17,192
                 ; 0000 008A data=UDR0;
0000ef 9100 00c6 	LDS  R16,198
                 ; 0000 008B if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000f1 2fe1      	MOV  R30,R17
0000f2 71ec      	ANDI R30,LOW(0x1C)
0000f3 f481      	BRNE _0x23
                 ; 0000 008C    {
                 ; 0000 008D    rx_buffer0[rx_wr_index0++]=data;
0000f4 2de8      	MOV  R30,R8
0000f5 9483      	INC  R8
0000f6 e0f0      	LDI  R31,0
0000f7 50e0      	SUBI R30,LOW(-_rx_buffer0)
0000f8 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0000f9 8300      	ST   Z,R16
                 ; 0000 008E #if RX_BUFFER_SIZE0 == 256
                 ; 0000 008F    // special case for receiver buffer size=256
                 ; 0000 0090    if (++rx_counter0 == 0)
                 ; 0000 0091       {
                 ; 0000 0092 #else
                 ; 0000 0093    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000fa e0e8      	LDI  R30,LOW(8)
0000fb 15e8      	CP   R30,R8
0000fc f409      	BRNE _0x24
0000fd 2488      	CLR  R8
                 ; 0000 0094    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x24:
0000fe 94a3      	INC  R10
0000ff e0e8      	LDI  R30,LOW(8)
000100 15ea      	CP   R30,R10
000101 f411      	BRNE _0x25
                 ; 0000 0095       {
                 ; 0000 0096       rx_counter0=0;
000102 24aa      	CLR  R10
                 ; 0000 0097 #endif
                 ; 0000 0098       rx_buffer_overflow0=1;
000103 9af0      	SBI  0x1E,0
                 ; 0000 0099       }
                 ; 0000 009A    }
                 _0x25:
                 ; 0000 009B }
                 _0x23:
000104 9109      	LD   R16,Y+
000105 9119      	LD   R17,Y+
000106 c024      	RJMP _0x3F
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 00A2 {
                 _getchar:
                 ; 0000 00A3 char data;
                 ; 0000 00A4 while (rx_counter0==0);
000107 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x28:
000108 20aa      	TST  R10
000109 f3f1      	BREQ _0x28
                 ; 0000 00A5 data=rx_buffer0[rx_rd_index0++];
00010a 2de7      	MOV  R30,R7
00010b 9473      	INC  R7
00010c e0f0      	LDI  R31,0
00010d 50e0      	SUBI R30,LOW(-_rx_buffer0)
00010e 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
00010f 8110      	LD   R17,Z
                 ; 0000 00A6 #if RX_BUFFER_SIZE0 != 256
                 ; 0000 00A7 if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
000110 e0e8      	LDI  R30,LOW(8)
000111 15e7      	CP   R30,R7
000112 f409      	BRNE _0x2B
000113 2477      	CLR  R7
                 ; 0000 00A8 #endif
                 ; 0000 00A9 #asm("cli")
                 _0x2B:
000114 94f8      	cli
                 ; 0000 00AA --rx_counter0;
000115 94aa      	DEC  R10
                 ; 0000 00AB #asm("sei")
000116 9478      	sei
                 ; 0000 00AC return data;
000117 2fe1      	MOV  R30,R17
000118 9119      	LD   R17,Y+
000119 9508      	RET
                 ; 0000 00AD }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 00BD {
                 _usart_tx_isr:
00011a 940e 0184 	CALL SUBOPT_0x0
                 ; 0000 00BE if (tx_counter0)
00011c 20bb      	TST  R11
00011d f069      	BREQ _0x2C
                 ; 0000 00BF    {
                 ; 0000 00C0    --tx_counter0;
00011e 94ba      	DEC  R11
                 ; 0000 00C1    UDR0=tx_buffer0[tx_rd_index0++];
00011f 2dec      	MOV  R30,R12
000120 94c3      	INC  R12
000121 e0f0      	LDI  R31,0
000122 5fe8      	SUBI R30,LOW(-_tx_buffer0)
000123 4ffc      	SBCI R31,HIGH(-_tx_buffer0)
000124 81e0      	LD   R30,Z
000125 93e0 00c6 	STS  198,R30
                 ; 0000 00C2 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00C3    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000127 e0e8      	LDI  R30,LOW(8)
000128 15ec      	CP   R30,R12
000129 f409      	BRNE _0x2D
00012a 24cc      	CLR  R12
                 ; 0000 00C4 #endif
                 ; 0000 00C5    }
                 _0x2D:
                 ; 0000 00C6 }
                 _0x2C:
                 _0x3F:
00012b 91e9      	LD   R30,Y+
00012c bfef      	OUT  SREG,R30
00012d 91f9      	LD   R31,Y+
00012e 91e9      	LD   R30,Y+
00012f 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00CD {
                 _putchar:
                 ; 0000 00CE while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0x2E:
000130 e0e8      	LDI  R30,LOW(8)
000131 15eb      	CP   R30,R11
000132 f3e9      	BREQ _0x2E
                 ; 0000 00CF #asm("cli")
000133 94f8      	cli
                 ; 0000 00D0 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000134 20bb      	TST  R11
000135 f421      	BRNE _0x32
000136 91e0 00c0 	LDS  R30,192
000138 72e0      	ANDI R30,LOW(0x20)
000139 f469      	BRNE _0x31
                 _0x32:
                 ; 0000 00D1    {
                 ; 0000 00D2    tx_buffer0[tx_wr_index0++]=c;
00013a 2de9      	MOV  R30,R9
00013b 9493      	INC  R9
00013c e0f0      	LDI  R31,0
00013d 5fe8      	SUBI R30,LOW(-_tx_buffer0)
00013e 4ffc      	SBCI R31,HIGH(-_tx_buffer0)
00013f 81a8      	LD   R26,Y
000140 83a0      	STD  Z+0,R26
                 ; 0000 00D3 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00D4    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
000141 e0e8      	LDI  R30,LOW(8)
000142 15e9      	CP   R30,R9
000143 f409      	BRNE _0x34
000144 2499      	CLR  R9
                 ; 0000 00D5 #endif
                 ; 0000 00D6    ++tx_counter0;
                 _0x34:
000145 94b3      	INC  R11
                 ; 0000 00D7    }
                 ; 0000 00D8 else
000146 c003      	RJMP _0x35
                 _0x31:
                 ; 0000 00D9    UDR0=c;
000147 81e8      	LD   R30,Y
000148 93e0 00c6 	STS  198,R30
                 ; 0000 00DA #asm("sei")
                 _0x35:
00014a 9478      	sei
                 ; 0000 00DB }
00014b 9621      	ADIW R28,1
00014c 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00E1 {
                 _main:
                 ; 0000 00E2 
                 ; 0000 00E3 // Crystal Oscillator division factor: 1
                 ; 0000 00E4 #pragma optsize-
                 ; 0000 00E5 CLKPR=0x80;
00014d e8e0      	LDI  R30,LOW(128)
00014e 93e0 0061 	STS  97,R30
                 ; 0000 00E6 CLKPR=0x00;
000150 e0e0      	LDI  R30,LOW(0)
000151 93e0 0061 	STS  97,R30
                 ; 0000 00E7 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00E8 #pragma optsize+
                 ; 0000 00E9 #endif
                 ; 0000 00EA 
                 ; 0000 00EB // External Interrupt(s) initialization
                 ; 0000 00EC EICRA=0x0A;
000153 e0ea      	LDI  R30,LOW(10)
000154 93e0 0069 	STS  105,R30
                 ; 0000 00ED EIMSK=0x00;
000156 e0e0      	LDI  R30,LOW(0)
000157 bbed      	OUT  0x1D,R30
                 ; 0000 00EE EIFR=0x03;
000158 e0e3      	LDI  R30,LOW(3)
000159 bbec      	OUT  0x1C,R30
                 ; 0000 00EF 
                 ; 0000 00F0 // USART initialization
                 ; 0000 00F1 UCSR0A=0x00;
00015a e0e0      	LDI  R30,LOW(0)
00015b 93e0 00c0 	STS  192,R30
                 ; 0000 00F2 UCSR0B=0xD8;
00015d ede8      	LDI  R30,LOW(216)
00015e 93e0 00c1 	STS  193,R30
                 ; 0000 00F3 UCSR0C=0x06;
000160 e0e6      	LDI  R30,LOW(6)
000161 93e0 00c2 	STS  194,R30
                 ; 0000 00F4 UBRR0H=0x00;
000163 e0e0      	LDI  R30,LOW(0)
000164 93e0 00c5 	STS  197,R30
                 ; 0000 00F5 UBRR0L=0x08;
000166 e0e8      	LDI  R30,LOW(8)
000167 93e0 00c4 	STS  196,R30
                 ; 0000 00F6 
                 ; 0000 00F7 // Out put Ignition signal
                 ; 0000 00F8 DDRB = 0b11111111;
000169 efef      	LDI  R30,LOW(255)
00016a b9e4      	OUT  0x4,R30
                 ; 0000 00F9 PORTB = 0b00000000;
00016b e0e0      	LDI  R30,LOW(0)
00016c b9e5      	OUT  0x5,R30
                 ; 0000 00FA 
                 ; 0000 00FB #asm("sei")
00016d 9478      	sei
                 ; 0000 00FC 
                 ; 0000 00FD while (1)
                 _0x36:
                 ; 0000 00FE       {
                 ; 0000 00FF         UDR0 = getchar();
00016e df98      	RCALL _getchar
00016f 93e0 00c6 	STS  198,R30
                 ; 0000 0100         if(UDR0 == 'c')
000171 91a0 00c6 	LDS  R26,198
000173 36a3      	CPI  R26,LOW(0x63)
000174 f421      	BRNE _0x39
                 ; 0000 0101         {
                 ; 0000 0102             EIMSK = 0b00000011;
000175 e0e3      	LDI  R30,LOW(3)
000176 bbed      	OUT  0x1D,R30
                 ; 0000 0103             putchar('u');
000177 e7e5      	LDI  R30,LOW(117)
000178 c007      	RJMP _0x3E
                 ; 0000 0104         }
                 ; 0000 0105         else if(UDR0 == 'w')
                 _0x39:
000179 91a0 00c6 	LDS  R26,198
00017b 37a7      	CPI  R26,LOW(0x77)
00017c f429      	BRNE _0x3B
                 ; 0000 0106         {
                 ; 0000 0107             EIMSK = 0b00000000;
00017d e0e0      	LDI  R30,LOW(0)
00017e bbed      	OUT  0x1D,R30
                 ; 0000 0108             putchar('l');
00017f e6ec      	LDI  R30,LOW(108)
                 _0x3E:
000180 93ea      	ST   -Y,R30
000181 dfae      	RCALL _putchar
                 ; 0000 0109         }
                 ; 0000 010A       }
                 _0x3B:
000182 cfeb      	RJMP _0x36
                 ; 0000 010B }
                 _0x3C:
000183 cfff      	RJMP _0x3C
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
000300           	.BYTE 0x8
                 _tx_buffer0:
000308           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000184 93ea      	ST   -Y,R30
000185 93fa      	ST   -Y,R31
000186 b7ef      	IN   R30,SREG
000187 93ea      	ST   -Y,R30
000188 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000189 ece8      	LDI  R30,LOW(200)
00018a e0f0      	LDI  R31,HIGH(200)
00018b 93fa      	ST   -Y,R31
00018c 93ea      	ST   -Y,R30
00018d 940c 018f 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
00018f 91e9      	ld   r30,y+
000190 91f9      	ld   r31,y+
000191 9630      	adiw r30,0
000192 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000193 ed80     +LDI R24 , LOW ( 0x7D0 )
000194 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000195 9701     +SBIW R24 , 1
000196 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000197 95a8      	wdr
000198 9731      	sbiw r30,1
000199 f7c9      	brne __delay_ms0
                 __delay_ms1:
00019a 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   7 r4 :   7 r5 :   5 r6 :   5 r7 :   4 
r8 :   4 r9 :   4 r10:   5 r11:   5 r12:   4 r13:   0 r14:   0 r15:   2 
r16:   4 r17:   8 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  11 r25:   5 r26:  14 r27:   5 r28:   2 r29:   1 r30: 117 r31:  43 
x  :   3 y  :  43 z  :  11 
Registers used: 28 out of 35 (80.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   2 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   7 
cbi   :   4 cbr   :   1 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  15 cpc   :   9 cpi   :   2 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   6 jmp   :  28 ld    :  24 ldd   :   0 ldi   :  67 
lds   :   5 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  10 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  15 pop   :   0 push  :   0 rcall :   2 ret   :   4 
reti  :   2 rjmp  :  13 rol   :   0 ror   :   0 sbc   :   0 sbci  :   4 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  25 std   :   1 sts   :  13 sub   :   0 subi  :   4 swap  :   0 
tst   :   3 wdr   :   2 
Instructions used: 39 out of 116 (33.6%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000336    786     36    822   32768   2.5%
[.dseg] 0x000100 0x000310      0     16     16    2303   0.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
