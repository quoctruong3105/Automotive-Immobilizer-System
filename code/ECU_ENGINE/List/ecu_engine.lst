
AVRASM ver. 2.1.30  E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm Mon Sep 19 14:10:52 2022

E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1061): warning: Register r3 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1062): warning: Register r5 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1063): warning: Register r8 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1064): warning: Register r7 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1065): warning: Register r10 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1066): warning: Register r9 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1067): warning: Register r12 already defined by the .DEF directive
E:\Smart key System\code\ECU_ENGINE\List\ecu_engine.asm(1068): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Advanced
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega328P
                 ;Program type             : Application
                 ;Clock frequency          : 8,000000 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 512 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega328P
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2303
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU EECR=0x1F
                 	.EQU EEDR=0x20
                 	.EQU EEARL=0x21
                 	.EQU EEARH=0x22
                 	.EQU SPSR=0x2D
                 	.EQU SPDR=0x2E
                 	.EQU SMCR=0x33
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU WDTCSR=0x60
                 	.EQU UCSR0A=0xC0
                 	.EQU UDR0=0xC6
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x1E
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x08FF
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _thuTuNo=R3
                 	.DEF _curSparkPlug=R5
                 	.DEF _rx_wr_index0=R8
                 	.DEF _rx_rd_index0=R7
                 	.DEF _rx_counter0=R10
                 	.DEF _tx_wr_index0=R9
                 	.DEF _tx_rd_index0=R12
                 	.DEF _tx_counter0=R11
                 
                 ;GPIOR0 INITIALIZATION VALUE
                 	.EQU __GPIOR0_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0042 	JMP  __RESET
000002 940c 00a3 	JMP  _ext_int0_isr
000004 940c 007a 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 00e5 	JMP  _usart_rx_isr
000026 940c 0000 	JMP  0x00
000028 940c 0116 	JMP  _usart_tx_isr
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000034 2710
000035 03e8
000036 0064
000037 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000038 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000039 1000
00003a 0100
00003b 0010
00003c 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3F:
00003d 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
00003e 0002      	.DW  0x02
00003f 0003      	.DW  0x03
000040 007a      	.DW  _0x3F*2
                 
                 _0xFFFFFFFF:
000041 0000      	.DW  0
                 
                 __RESET:
000042 94f8      	CLI
000043 27ee      	CLR  R30
000044 bbef      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000045 e0f1      	LDI  R31,1
000046 bff5      	OUT  MCUCR,R31
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000048 e1f8      	LDI  R31,0x18
000049 95a8      	WDR
00004a b7a4      	IN   R26,MCUSR
00004b 7fa7      	CBR  R26,8
00004c bfa4      	OUT  MCUSR,R26
00004d 93f0 0060 	STS  WDTCSR,R31
00004f 93e0 0060 	STS  WDTCSR,R30
                 
                 ;CLEAR R2-R14
000051 e08d      	LDI  R24,(14-2)+1
000052 e0a2      	LDI  R26,2
000053 27bb      	CLR  R27
                 __CLEAR_REG:
000054 93ed      	ST   X+,R30
000055 958a      	DEC  R24
000056 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000057 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000058 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000059 e0a0      	LDI  R26,LOW(__SRAM_START)
00005a e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00005b 93ed      	ST   X+,R30
00005c 9701      	SBIW R24,1
00005d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005e e7ec      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000060 9185      	LPM  R24,Z+
000061 9195      	LPM  R25,Z+
000062 9700      	SBIW R24,0
000063 f061      	BREQ __GLOBAL_INI_END
000064 91a5      	LPM  R26,Z+
000065 91b5      	LPM  R27,Z+
000066 9005      	LPM  R0,Z+
000067 9015      	LPM  R1,Z+
000068 01bf      	MOVW R22,R30
000069 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006a 9005      	LPM  R0,Z+
00006b 920d      	ST   X+,R0
00006c 9701      	SBIW R24,1
00006d f7e1      	BRNE __GLOBAL_INI_LOOP
00006e 01fb      	MOVW R30,R22
00006f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0 INITIALIZATION
000070 e0e0      	LDI  R30,__GPIOR0_INIT
000071 bbee      	OUT  GPIOR0,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000072 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000073 bfed      	OUT  SPL,R30
000074 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000075 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000076 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000077 e0d3      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000078 940c 0149 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x300
                 
                 	.CSEG
                 ;// c -> correct
                 ;// w -> wrong
                 ;// l -> lock
                 ;// u -> unlock
                 ;
                 ;#include <mega328p.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x01
                 	.EQU __sm_mask=0x0E
                 	.EQU __sm_adc_noise_red=0x02
                 	.EQU __sm_powerdown=0x04
                 	.EQU __sm_powersave=0x06
                 	.EQU __sm_standby=0x0C
                 	.EQU __sm_ext_standby=0x0E
                 	.SET power_ctrl_reg=smcr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;
                 ;#define Igt1 PORTB.0
                 ;#define Igt2 PORTB.1
                 ;#define Igt3 PORTB.2
                 ;#define Igt4 PORTB.3
                 ;#define SparkPlug1 1
                 ;#define SparkPlug4 2
                 ;#define SparkPlug2 3
                 ;#define SparkPlug3 4
                 ;#define On 1
                 ;#define Off 0
                 ;
                 ;#ifndef RXB8
                 ;#define RXB8 1
                 ;#endif
                 ;#ifndef TXB8
                 ;#define TXB8 0
                 ;#endif
                 ;#ifndef UPE
                 ;#define UPE 2
                 ;#endif
                 ;#ifndef DOR
                 ;#define DOR 3
                 ;#endif
                 ;#ifndef FE
                 ;#define FE 4
                 ;#endif
                 ;#ifndef UDRE
                 ;#define UDRE 5
                 ;#endif
                 ;#ifndef RXC
                 ;#define RXC 7
                 ;#endif
                 ;
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;
                 ;
                 ;unsigned int thuTuNo = 0;
                 ;unsigned int curSparkPlug;
                 ;
                 ;// Chose spark plug in turn
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0037 {
                 
                 	.CSEG
                 _ext_int1_isr:
00007a 940e 0180 	CALL SUBOPT_0x0
                 ; 0000 0038     thuTuNo++;
00007c e0e1      	LDI  R30,LOW(1)
00007d e0f0      	LDI  R31,HIGH(1)
                +
00007e 0e3e     +ADD R3 , R30
00007f 1e4f     +ADC R4 , R31
                 	__ADDWRR 3,4,30,31
                 ; 0000 0039     if(thuTuNo == 5)
000080 e0e5      	LDI  R30,LOW(5)
000081 e0f0      	LDI  R31,HIGH(5)
000082 15e3      	CP   R30,R3
000083 05f4      	CPC  R31,R4
000084 f421      	BRNE _0x3
                 ; 0000 003A     {
                 ; 0000 003B         thuTuNo = 1;
000085 e0e1      	LDI  R30,LOW(1)
000086 e0f0      	LDI  R31,HIGH(1)
                +
000087 2e3e     +MOV R3 , R30
000088 2e4f     +MOV R4 , R31
                 	__PUTW1R 3,4
                 ; 0000 003C     }
                 ; 0000 003D     if(thuTuNo == 1)
                 _0x3:
000089 e0e1      	LDI  R30,LOW(1)
00008a e0f0      	LDI  R31,HIGH(1)
00008b 15e3      	CP   R30,R3
00008c 05f4      	CPC  R31,R4
00008d f409      	BRNE _0x4
                 ; 0000 003E     {
                 ; 0000 003F         curSparkPlug = SparkPlug1;
00008e c011      	RJMP _0x3C
                 ; 0000 0040     }
                 ; 0000 0041     else if(thuTuNo == 2)
                 _0x4:
00008f e0e2      	LDI  R30,LOW(2)
000090 e0f0      	LDI  R31,HIGH(2)
000091 15e3      	CP   R30,R3
000092 05f4      	CPC  R31,R4
000093 f409      	BRNE _0x6
                 ; 0000 0042     {
                 ; 0000 0043         curSparkPlug = SparkPlug4;
000094 c00b      	RJMP _0x3C
                 ; 0000 0044     }
                 ; 0000 0045     else if(thuTuNo == 3)
                 _0x6:
000095 e0e3      	LDI  R30,LOW(3)
000096 e0f0      	LDI  R31,HIGH(3)
000097 15e3      	CP   R30,R3
000098 05f4      	CPC  R31,R4
000099 f409      	BRNE _0x8
                 ; 0000 0046     {
                 ; 0000 0047         curSparkPlug = SparkPlug2;
00009a c005      	RJMP _0x3C
                 ; 0000 0048     }
                 ; 0000 0049     else if(thuTuNo == 4)
                 _0x8:
00009b e0e4      	LDI  R30,LOW(4)
00009c e0f0      	LDI  R31,HIGH(4)
00009d 15e3      	CP   R30,R3
00009e 05f4      	CPC  R31,R4
00009f f411      	BRNE _0xA
                 ; 0000 004A     {
                 ; 0000 004B         curSparkPlug = SparkPlug3;
                 _0x3C:
                +
0000a0 2e5e     +MOV R5 , R30
0000a1 2e6f     +MOV R6 , R31
                 	__PUTW1R 5,6
                 ; 0000 004C     }
                 ; 0000 004D }
                 _0xA:
0000a2 c084      	RJMP _0x3E
                 ;
                 ;// Ignition timing
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 0051 {
                 _ext_int0_isr:
0000a3 920a      	ST   -Y,R0
0000a4 921a      	ST   -Y,R1
0000a5 92fa      	ST   -Y,R15
0000a6 936a      	ST   -Y,R22
0000a7 937a      	ST   -Y,R23
0000a8 938a      	ST   -Y,R24
0000a9 939a      	ST   -Y,R25
0000aa 93aa      	ST   -Y,R26
0000ab 93ba      	ST   -Y,R27
0000ac 93ea      	ST   -Y,R30
0000ad 93fa      	ST   -Y,R31
0000ae b7ef      	IN   R30,SREG
0000af 93ea      	ST   -Y,R30
                 ; 0000 0052     //unsigned int i;
                 ; 0000 0053     if(curSparkPlug == SparkPlug1)
0000b0 e0e1      	LDI  R30,LOW(1)
0000b1 e0f0      	LDI  R31,HIGH(1)
0000b2 15e5      	CP   R30,R5
0000b3 05f6      	CPC  R31,R6
0000b4 f429      	BRNE _0xB
                 ; 0000 0054     {
                 ; 0000 0055         Igt1 = On;
0000b5 9a28      	SBI  0x5,0
                 ; 0000 0056         delay_ms(200);
0000b6 940e 0185 	CALL SUBOPT_0x1
                 ; 0000 0057         Igt1 = Off;
0000b8 9828      	CBI  0x5,0
                 ; 0000 0058     }
                 ; 0000 0059     else if(curSparkPlug == SparkPlug4)
0000b9 c01d      	RJMP _0x10
                 _0xB:
0000ba e0e2      	LDI  R30,LOW(2)
0000bb e0f0      	LDI  R31,HIGH(2)
0000bc 15e5      	CP   R30,R5
0000bd 05f6      	CPC  R31,R6
0000be f429      	BRNE _0x11
                 ; 0000 005A     {
                 ; 0000 005B         Igt4 = On;
0000bf 9a2b      	SBI  0x5,3
                 ; 0000 005C         delay_ms(200);
0000c0 940e 0185 	CALL SUBOPT_0x1
                 ; 0000 005D         Igt4 = Off;
0000c2 982b      	CBI  0x5,3
                 ; 0000 005E     }
                 ; 0000 005F     else if(curSparkPlug == SparkPlug2)
0000c3 c013      	RJMP _0x16
                 _0x11:
0000c4 e0e3      	LDI  R30,LOW(3)
0000c5 e0f0      	LDI  R31,HIGH(3)
0000c6 15e5      	CP   R30,R5
0000c7 05f6      	CPC  R31,R6
0000c8 f429      	BRNE _0x17
                 ; 0000 0060     {
                 ; 0000 0061         Igt2 = On;
0000c9 9a29      	SBI  0x5,1
                 ; 0000 0062         delay_ms(200);
0000ca 940e 0185 	CALL SUBOPT_0x1
                 ; 0000 0063         Igt2 = Off;
0000cc 9829      	CBI  0x5,1
                 ; 0000 0064     }
                 ; 0000 0065     else if(curSparkPlug == SparkPlug3)
0000cd c009      	RJMP _0x1C
                 _0x17:
0000ce e0e4      	LDI  R30,LOW(4)
0000cf e0f0      	LDI  R31,HIGH(4)
0000d0 15e5      	CP   R30,R5
0000d1 05f6      	CPC  R31,R6
0000d2 f421      	BRNE _0x1D
                 ; 0000 0066     {
                 ; 0000 0067         Igt3 = On;
0000d3 9a2a      	SBI  0x5,2
                 ; 0000 0068         delay_ms(200);
0000d4 940e 0185 	CALL SUBOPT_0x1
                 ; 0000 0069         Igt3 = Off;
0000d6 982a      	CBI  0x5,2
                 ; 0000 006A     }
                 ; 0000 006B }
                 _0x1D:
                 _0x1C:
                 _0x16:
                 _0x10:
0000d7 91e9      	LD   R30,Y+
0000d8 bfef      	OUT  SREG,R30
0000d9 91f9      	LD   R31,Y+
0000da 91e9      	LD   R30,Y+
0000db 91b9      	LD   R27,Y+
0000dc 91a9      	LD   R26,Y+
0000dd 9199      	LD   R25,Y+
0000de 9189      	LD   R24,Y+
0000df 9179      	LD   R23,Y+
0000e0 9169      	LD   R22,Y+
0000e1 90f9      	LD   R15,Y+
0000e2 9019      	LD   R1,Y+
0000e3 9009      	LD   R0,Y+
0000e4 9518      	RETI
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE0 8
                 ;char rx_buffer0[RX_BUFFER_SIZE0];
                 ;
                 ;#if RX_BUFFER_SIZE0 <= 256
                 ;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#else
                 ;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow0;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 007C {
                 _usart_rx_isr:
0000e5 940e 0180 	CALL SUBOPT_0x0
                 ; 0000 007D char status,data;
                 ; 0000 007E status=UCSR0A;
0000e7 931a      	ST   -Y,R17
0000e8 930a      	ST   -Y,R16
                 ;	status -> R17
                 ;	data -> R16
0000e9 9110 00c0 	LDS  R17,192
                 ; 0000 007F data=UDR0;
0000eb 9100 00c6 	LDS  R16,198
                 ; 0000 0080 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
0000ed 2fe1      	MOV  R30,R17
0000ee 71ec      	ANDI R30,LOW(0x1C)
0000ef f481      	BRNE _0x22
                 ; 0000 0081    {
                 ; 0000 0082    rx_buffer0[rx_wr_index0++]=data;
0000f0 2de8      	MOV  R30,R8
0000f1 9483      	INC  R8
0000f2 e0f0      	LDI  R31,0
0000f3 50e0      	SUBI R30,LOW(-_rx_buffer0)
0000f4 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
0000f5 8300      	ST   Z,R16
                 ; 0000 0083 #if RX_BUFFER_SIZE0 == 256
                 ; 0000 0084    // special case for receiver buffer size=256
                 ; 0000 0085    if (++rx_counter0 == 0)
                 ; 0000 0086       {
                 ; 0000 0087 #else
                 ; 0000 0088    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
0000f6 e0e8      	LDI  R30,LOW(8)
0000f7 15e8      	CP   R30,R8
0000f8 f409      	BRNE _0x23
0000f9 2488      	CLR  R8
                 ; 0000 0089    if (++rx_counter0 == RX_BUFFER_SIZE0)
                 _0x23:
0000fa 94a3      	INC  R10
0000fb e0e8      	LDI  R30,LOW(8)
0000fc 15ea      	CP   R30,R10
0000fd f411      	BRNE _0x24
                 ; 0000 008A       {
                 ; 0000 008B       rx_counter0=0;
0000fe 24aa      	CLR  R10
                 ; 0000 008C #endif
                 ; 0000 008D       rx_buffer_overflow0=1;
0000ff 9af0      	SBI  0x1E,0
                 ; 0000 008E       }
                 ; 0000 008F    }
                 _0x24:
                 ; 0000 0090 }
                 _0x22:
000100 9109      	LD   R16,Y+
000101 9119      	LD   R17,Y+
000102 c024      	RJMP _0x3E
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 0097 {
                 _getchar:
                 ; 0000 0098 char data;
                 ; 0000 0099 while (rx_counter0==0);
000103 931a      	ST   -Y,R17
                 ;	data -> R17
                 _0x27:
000104 20aa      	TST  R10
000105 f3f1      	BREQ _0x27
                 ; 0000 009A data=rx_buffer0[rx_rd_index0++];
000106 2de7      	MOV  R30,R7
000107 9473      	INC  R7
000108 e0f0      	LDI  R31,0
000109 50e0      	SUBI R30,LOW(-_rx_buffer0)
00010a 4ffd      	SBCI R31,HIGH(-_rx_buffer0)
00010b 8110      	LD   R17,Z
                 ; 0000 009B #if RX_BUFFER_SIZE0 != 256
                 ; 0000 009C if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
00010c e0e8      	LDI  R30,LOW(8)
00010d 15e7      	CP   R30,R7
00010e f409      	BRNE _0x2A
00010f 2477      	CLR  R7
                 ; 0000 009D #endif
                 ; 0000 009E #asm("cli")
                 _0x2A:
000110 94f8      	cli
                 ; 0000 009F --rx_counter0;
000111 94aa      	DEC  R10
                 ; 0000 00A0 #asm("sei")
000112 9478      	sei
                 ; 0000 00A1 return data;
000113 2fe1      	MOV  R30,R17
000114 9119      	LD   R17,Y+
000115 9508      	RET
                 ; 0000 00A2 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// USART Transmitter buffer
                 ;#define TX_BUFFER_SIZE0 8
                 ;char tx_buffer0[TX_BUFFER_SIZE0];
                 ;
                 ;#if TX_BUFFER_SIZE0 <= 256
                 ;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#else
                 ;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
                 ;#endif
                 ;
                 ;// USART Transmitter interrupt service routine
                 ;interrupt [USART_TXC] void usart_tx_isr(void)
                 ; 0000 00B2 {
                 _usart_tx_isr:
000116 940e 0180 	CALL SUBOPT_0x0
                 ; 0000 00B3 if (tx_counter0)
000118 20bb      	TST  R11
000119 f069      	BREQ _0x2B
                 ; 0000 00B4    {
                 ; 0000 00B5    --tx_counter0;
00011a 94ba      	DEC  R11
                 ; 0000 00B6    UDR0=tx_buffer0[tx_rd_index0++];
00011b 2dec      	MOV  R30,R12
00011c 94c3      	INC  R12
00011d e0f0      	LDI  R31,0
00011e 5fe8      	SUBI R30,LOW(-_tx_buffer0)
00011f 4ffc      	SBCI R31,HIGH(-_tx_buffer0)
000120 81e0      	LD   R30,Z
000121 93e0 00c6 	STS  198,R30
                 ; 0000 00B7 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00B8    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
000123 e0e8      	LDI  R30,LOW(8)
000124 15ec      	CP   R30,R12
000125 f409      	BRNE _0x2C
000126 24cc      	CLR  R12
                 ; 0000 00B9 #endif
                 ; 0000 00BA    }
                 _0x2C:
                 ; 0000 00BB }
                 _0x2B:
                 _0x3E:
000127 91e9      	LD   R30,Y+
000128 bfef      	OUT  SREG,R30
000129 91f9      	LD   R31,Y+
00012a 91e9      	LD   R30,Y+
00012b 9518      	RETI
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Write a character to the USART Transmitter buffer
                 ;#define _ALTERNATE_PUTCHAR_
                 ;#pragma used+
                 ;void putchar(char c)
                 ; 0000 00C2 {
                 _putchar:
                 ; 0000 00C3 while (tx_counter0 == TX_BUFFER_SIZE0);
                 ;	c -> Y+0
                 _0x2D:
00012c e0e8      	LDI  R30,LOW(8)
00012d 15eb      	CP   R30,R11
00012e f3e9      	BREQ _0x2D
                 ; 0000 00C4 #asm("cli")
00012f 94f8      	cli
                 ; 0000 00C5 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
000130 20bb      	TST  R11
000131 f421      	BRNE _0x31
000132 91e0 00c0 	LDS  R30,192
000134 72e0      	ANDI R30,LOW(0x20)
000135 f469      	BRNE _0x30
                 _0x31:
                 ; 0000 00C6    {
                 ; 0000 00C7    tx_buffer0[tx_wr_index0++]=c;
000136 2de9      	MOV  R30,R9
000137 9493      	INC  R9
000138 e0f0      	LDI  R31,0
000139 5fe8      	SUBI R30,LOW(-_tx_buffer0)
00013a 4ffc      	SBCI R31,HIGH(-_tx_buffer0)
00013b 81a8      	LD   R26,Y
00013c 83a0      	STD  Z+0,R26
                 ; 0000 00C8 #if TX_BUFFER_SIZE0 != 256
                 ; 0000 00C9    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
00013d e0e8      	LDI  R30,LOW(8)
00013e 15e9      	CP   R30,R9
00013f f409      	BRNE _0x33
000140 2499      	CLR  R9
                 ; 0000 00CA #endif
                 ; 0000 00CB    ++tx_counter0;
                 _0x33:
000141 94b3      	INC  R11
                 ; 0000 00CC    }
                 ; 0000 00CD else
000142 c003      	RJMP _0x34
                 _0x30:
                 ; 0000 00CE    UDR0=c;
000143 81e8      	LD   R30,Y
000144 93e0 00c6 	STS  198,R30
                 ; 0000 00CF #asm("sei")
                 _0x34:
000146 9478      	sei
                 ; 0000 00D0 }
000147 9621      	ADIW R28,1
000148 9508      	RET
                 ;#pragma used-
                 ;#endif
                 ;
                 ;
                 ;void main(void)
                 ; 0000 00D6 {
                 _main:
                 ; 0000 00D7 
                 ; 0000 00D8 // Crystal Oscillator division factor: 1
                 ; 0000 00D9 #pragma optsize-
                 ; 0000 00DA CLKPR=0x80;
000149 e8e0      	LDI  R30,LOW(128)
00014a 93e0 0061 	STS  97,R30
                 ; 0000 00DB CLKPR=0x00;
00014c e0e0      	LDI  R30,LOW(0)
00014d 93e0 0061 	STS  97,R30
                 ; 0000 00DC #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00DD #pragma optsize+
                 ; 0000 00DE #endif
                 ; 0000 00DF 
                 ; 0000 00E0 // External Interrupt(s) initialization
                 ; 0000 00E1 EICRA=0x0A;
00014f e0ea      	LDI  R30,LOW(10)
000150 93e0 0069 	STS  105,R30
                 ; 0000 00E2 EIMSK=0x00;
000152 e0e0      	LDI  R30,LOW(0)
000153 bbed      	OUT  0x1D,R30
                 ; 0000 00E3 EIFR=0x03;
000154 e0e3      	LDI  R30,LOW(3)
000155 bbec      	OUT  0x1C,R30
                 ; 0000 00E4 
                 ; 0000 00E5 // USART initialization
                 ; 0000 00E6 UCSR0A=0x00;
000156 e0e0      	LDI  R30,LOW(0)
000157 93e0 00c0 	STS  192,R30
                 ; 0000 00E7 UCSR0B=0xD8;
000159 ede8      	LDI  R30,LOW(216)
00015a 93e0 00c1 	STS  193,R30
                 ; 0000 00E8 UCSR0C=0x06;
00015c e0e6      	LDI  R30,LOW(6)
00015d 93e0 00c2 	STS  194,R30
                 ; 0000 00E9 UBRR0H=0x00;
00015f e0e0      	LDI  R30,LOW(0)
000160 93e0 00c5 	STS  197,R30
                 ; 0000 00EA UBRR0L=0x08;
000162 e0e8      	LDI  R30,LOW(8)
000163 93e0 00c4 	STS  196,R30
                 ; 0000 00EB 
                 ; 0000 00EC // Out put Ignition signal
                 ; 0000 00ED DDRB = 0b11111111;
000165 efef      	LDI  R30,LOW(255)
000166 b9e4      	OUT  0x4,R30
                 ; 0000 00EE PORTB = 0b00000000;
000167 e0e0      	LDI  R30,LOW(0)
000168 b9e5      	OUT  0x5,R30
                 ; 0000 00EF 
                 ; 0000 00F0 #asm("sei")
000169 9478      	sei
                 ; 0000 00F1 
                 ; 0000 00F2 while (1)
                 _0x35:
                 ; 0000 00F3       {
                 ; 0000 00F4         UDR0 = getchar();
00016a df98      	RCALL _getchar
00016b 93e0 00c6 	STS  198,R30
                 ; 0000 00F5         if(UDR0 == 'c')
00016d 91a0 00c6 	LDS  R26,198
00016f 36a3      	CPI  R26,LOW(0x63)
000170 f421      	BRNE _0x38
                 ; 0000 00F6         {
                 ; 0000 00F7             EIMSK = 0b00000011;
000171 e0e3      	LDI  R30,LOW(3)
000172 bbed      	OUT  0x1D,R30
                 ; 0000 00F8             putchar('u');
000173 e7e5      	LDI  R30,LOW(117)
000174 c007      	RJMP _0x3D
                 ; 0000 00F9         }
                 ; 0000 00FA         else if(UDR0 == 'w')
                 _0x38:
000175 91a0 00c6 	LDS  R26,198
000177 37a7      	CPI  R26,LOW(0x77)
000178 f429      	BRNE _0x3A
                 ; 0000 00FB         {
                 ; 0000 00FC             EIMSK = 0b00000000;
000179 e0e0      	LDI  R30,LOW(0)
00017a bbed      	OUT  0x1D,R30
                 ; 0000 00FD             putchar('l');
00017b e6ec      	LDI  R30,LOW(108)
                 _0x3D:
00017c 93ea      	ST   -Y,R30
00017d dfae      	RCALL _putchar
                 ; 0000 00FE         }
                 ; 0000 00FF       }
                 _0x3A:
00017e cfeb      	RJMP _0x35
                 ; 0000 0100 }
                 _0x3B:
00017f cfff      	RJMP _0x3B
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _rx_buffer0:
000300           	.BYTE 0x8
                 _tx_buffer0:
000308           	.BYTE 0x8
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000180 93ea      	ST   -Y,R30
000181 93fa      	ST   -Y,R31
000182 b7ef      	IN   R30,SREG
000183 93ea      	ST   -Y,R30
000184 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000185 ece8      	LDI  R30,LOW(200)
000186 e0f0      	LDI  R31,HIGH(200)
000187 93fa      	ST   -Y,R31
000188 93ea      	ST   -Y,R30
000189 940c 018b 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
00018b 91e9      	ld   r30,y+
00018c 91f9      	ld   r31,y+
00018d 9630      	adiw r30,0
00018e f039      	breq __delay_ms1
                 __delay_ms0:
                +
00018f ed80     +LDI R24 , LOW ( 0x7D0 )
000190 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000191 9701     +SBIW R24 , 1
000192 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000193 95a8      	wdr
000194 9731      	sbiw r30,1
000195 f7c9      	brne __delay_ms0
                 __delay_ms1:
000196 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega328P register use summary:
r0 :   6 r1 :   3 r2 :   0 r3 :   7 r4 :   7 r5 :   5 r6 :   5 r7 :   4 
r8 :   4 r9 :   4 r10:   5 r11:   5 r12:   4 r13:   0 r14:   0 r15:   2 
r16:   4 r17:   8 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  11 r25:   5 r26:  14 r27:   5 r28:   2 r29:   1 r30: 117 r31:  43 
x  :   3 y  :  43 z  :  11 
Registers used: 28 out of 35 (80.0%)

ATmega328P instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   2 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   5 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   7 
cbi   :   4 cbr   :   1 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  15 cpc   :   9 cpi   :   2 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   3 inc   :   6 jmp   :  28 ld    :  24 ldd   :   0 ldi   :  67 
lds   :   5 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  10 movw  :   3 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  15 pop   :   0 push  :   0 rcall :   2 ret   :   4 
reti  :   2 rjmp  :  13 rol   :   0 ror   :   0 sbc   :   0 sbci  :   4 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   3 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  25 std   :   1 sts   :  13 sub   :   0 subi  :   4 swap  :   0 
tst   :   3 wdr   :   2 
Instructions used: 39 out of 116 (33.6%)

ATmega328P memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00032e    786     28    814   32768   2.5%
[.dseg] 0x000100 0x000310      0     16     16    2303   0.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
